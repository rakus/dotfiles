#
# FILE: rks
#
# ABSTRACT:  Combined Shell and Vim Setup. Should work for BASH and KSH.
#
# Also creates following files (if they don't exist):
#     - .inputrc.rks
#     - .vimrc.rks
#
# AUTHOR: Ralf Schandl
#
# shellcheck shell=bash

RKS_VERSION=1

case $- in
    *i*)
        echo ""
        echo "Moin Moin"
        echo ""
        ;;
esac

if [ -n "${BASH_VERSION:-}" ]; then
    IS_BASH=TRUE
    BUILTIN=builtin
    shopt -s checkwinsize
elif [ -n "${KSH_VERSION:-}" ]; then
    # ksh93 only?
    IS_KSH=TRUE
else
    echo >&2 ""
    echo >&2 "WARNING: Neither BASH nor KSH93 detected - Good luck!"
    echo >&2 ""
fi

case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    *cygwin*) IS_CYGWIN=TRUE ;;
    *msys*) IS_MSYS=TRUE ;;
esac

#---------[ History ]----------------------------------------------------------
# Show timestamp with commands when calling history
export HISTTIMEFORMAT='%F %T: '

export HISTSIZE=2000

export HISTFILE=${HOME}/.rks_history

if [ "$IS_KSH" ]; then
    export HISTFILE=${HOME}/.rks_ksh_history
elif [ "$IS_BASH" ]; then
    export HISTFILE=${HOME}/.rks_bash_history
    history -r
    # disable history expansion with !
    #set +H
fi

gh()
{
    HISTTIMEFORMAT='' history | grep "$@" | grep -v "^ *[0-9][0-9]*  ght\\? "| uniq -f1
}


#---------[ VI command line editing mode ]-------------------------------------
set -o vi
if ! grep "^# VERSION:$RKS_VERSION\$" "$HOME/.inputrc.rks" >/dev/null 2>&1; then
    cat > "$HOME/.inputrc.rks" << EOF
# VERSION:$RKS_VERSION
set enable-bracketed-paste off
set editing-mode vi
"\\e[A": history-search-backward
"\\e[B": history-search-forward
\$if mode=vi
set keymap vi-command
"k": history-search-backward
"j": history-search-forward
\$endif
EOF
fi

INPUTRC=$HOME/.inputrc.rks

# load my inputrc
bind -f "$INPUTRC"

#---------[ Prompt ]-----------------------------------------------------------
PROMPT_HOST=$(hostname|cut -d. -f1)
ESC=$(printf '\033')
BEL=$(printf '\007')


nClr=32
pClr=31
if [  "$IS_BASH" ]; then
    PS1='\[\033[01;${nClr}m\]($?)\u@\h\[\033[00m\]: \[\033[01;${pClr}m\]\w\[\033[00m\]'$'\n''$ '
else
    # For !BASH - don't use \[...\]
    # sh ellcheck disable=SC2025
    PS1='${ESC}[01;${nClr}m($?)$(logname)@$PROMPT_HOST${ESC}[00m: ${ESC}[01;${pClr}m$([ "${PWD#$HOME}" != "${PWD}" ] && echo -n "~"; echo ${PWD#$HOME})${ESC}[00m'$'\n''$ '
fi

case "$TERM" in
    xterm*|rxvt*)
        # Set the title of the terminal
        PROMPT_COMMAND="echo -ne \"${ESC}]2;\$USER@$PROMPT_HOST:\${PWD/\$HOME/~}${BEL}\""
        ;;
    *)
        ;;
esac

#---------[ Path ]-------------------------------------------------------------
PATH="$HOME/bin:$HOME/local/bin:$PATH"
export PATH

#---------[ LS_COLOR ]---------------------------------------------------------

function chgLsColor
{
    typeset t=$1
    typeset c=$2
    typeset lsc
    if echo "$LS_COLORS" | grep "$t=" >/dev/null; then
        # doesn't work with ${var/search/replace}
        # shellcheck disable=SC2001
        lsc=$(echo "$LS_COLORS" | sed "s/${t}=[0-9;]*:/${t}=${c}:/")
    else
        lsc="$LS_COLORS:${t}=${c}:"
        # doesn't work with ${var/search/replace}
        # shellcheck disable=SC2001
        lsc=$(echo "$lsc" | sed "s/:::*/:/g")
    fi
    export LS_COLORS=$lsc
}

# Directory other writable -> Yellow on Green
chgLsColor ow "42;93"

unset -f chgLsColor

#---------[ Alias ]------------------------------------------------------------

alias gitdiff="git difftool -t vimdiff -y"

# Cygwin might have no clear command - simulate it
if ! type clear >/dev/null 2>&1; then
    alias clear="echo -e '\033[2J\033[0;0f'"
fi
alias cls=clear

alias ls='ls --color=auto'
alias ltr="ls -ltr"
alias ll='ls -l'

# delete vi-style backup files
#alias   rmbak='rm *~ .[A-Za-z]*~'
rmbak()
{
    typeset opt OPTIND OPTARG depth="-maxdepth 1" action="-delete"
    while getopts ":rn" opt; do
        case "$opt" in
            r) depth='' ;;
            n) action='' ;;
            "?")
                echo >&2 "Invalid option: -$OPTARG"
                echo >&2 "USAGE: rmbak [-rn]"
                echo >&2 "  -r recursive"
                echo >&2 "  -n dry-run - print files but don't delete"
                return 1
                ;;
        esac
    done
    # shellcheck disable=SC2086  # no quotes, depth and action might be empty (aka noop)
    find . $depth -name \*~ -type f -print $action
}

# fully qualified file name
# no readlink - I don't want to resolve symlinks
function fq
{
    typeset arg
    for arg in "$@"; do
        if [ -d "$arg" ]; then
            (cd "$arg" && pwd) || return 1
        else
            (fq "$(dirname "$arg")" | tr -d '\n'  && echo "/$(basename "$arg")") || return 1
        fi
    done
    return 0
}

if [ -n "$IS_CYGWIN" ]; then
    alias uff=cygstart.exe
elif [ -n "$IS_MSYS" ]; then
    alias uff=start
elif type xdg-open >/dev/null 2>&1; then
    alias uff=xdg-open
elif type mimeopen >/dev/null 2>&1; then
    function uff
    {
        mimeopen "$@" &
    }
elif type open >/dev/null 2>&1; then
    alias uff=open
elif type mymimeopen >/dev/null 2>&1; then
    alias uff='mymimeopen -fq'
else
    function uff
    {
        echo >&2 ""
        echo >&2 "  No tool for opening files found -- sorry"
        echo >&2 ""
        return 1
    }
fi

function __print_size_list {
    if [ "$1" == "-h" ]; then
        awk '{
        sum=$1; giga=(1024*1024*1024);mega=(1024*1024);kilo=(1024);hum[giga]="G";hum[mega]="M";hum[kilo]="K";
        for (x=giga; x>=1024; x/=1024) {
            if (sum>=x) {
                printf "%7.1f%s",sum/x,hum[x];
                sub(/[0-9]*[ \t]*/,"  ", $0);
                print $0;
                break
            } } }'
    else
        awk '{printf "%8s", $1; sub(/[0-9]*[ \t]*/,"  ", $0); print $0; }'
    fi
}

function dud
{
    typeset humanPrint
    [ "$1" = "-h" ] && humanPrint="$1" && shift
    find "${@:-.}" -maxdepth 1 -mindepth 1 -type d -print0 | xargs --null du -sB1 | sort -n  | __print_size_list "$humanPrint"
}


function lsmax
{
    typeset humanPrint
    [ "$1" = "-h" ] && humanPrint="$1" && shift
    find "${@:-.}" -xdev -printf "%s %p\n" | sort -n | __print_size_list "$humanPrint" | tail -25
}

#
# Prints the scp-path of the given filename
# scp-path is: <user>@<host>:<full qualified filename>
# Print a warning if:
# - file does not exist
# - file is not readable
# - file is not writable
#
function scppath
{
    (( $# != 1 )) && echo "Usage: scppath <dir or file>" && return 1
    typeset fqFile
    fqFile=$(readlink -f "$1")
    if [ ! -e "$fqFile" ]; then
        echo >&2 "WARNING: File does not exist: $fqFile"
    else
        if [ ! -r "$fqFile" ]; then
            echo >&2 "WARNING: File not readable: $fqFile"
        fi
        if [ ! -w "$fqFile" ]; then
            echo >&2 "WARNING: File not writable: $fqFile"
        fi
    fi
    echo "$USER@$(hostname):$fqFile"
}

function up
{
    typeset arg cdstr
    arg=${1:-1}
    if [ -z "${arg//[0-9]/}" ]; then
        # Want the sequence
        # shellcheck disable=SC2046,SC2086
        cdstr=$(printf '%0.s../' $(seq 1 $arg))
    else
        arg="${arg%/}"
        cdstr=$(pwd | grep -o "^.*/${arg#/}[^/]*/")
        if [ -z "$cdstr" ]; then
            echo >&2 "No parent dir matching '${arg}*' found."
            return 1
        fi
    fi
    $BUILTIN cd "$cdstr"
}

if [ -n "${IS_BASH:-}" ]; then
    function _up_complete
    {
        local cur opts dir
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        #prev="${COMP_WORDS[COMP_CWORD-1]}"
        if [ -n "$cur" ]; then
            cur=$(eval "echo ${cur}")
            dir="${PWD##/}"
            opts="${dir//\//\/$'\n'}"
            #opts=$(echo "$(dirname ${PWD##/})" | tr "/" "/\n")
            local IFS=$'\n'
            # shellcheck disable=SC2207
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            # Do escaping
            if [ ${#COMPREPLY[@]} = 1 ]; then
                # shellcheck disable=SC2178
                COMPREPLY=$(printf "%q" "${COMPREPLY[0]}")
            else
                for ((i=0; i < ${#COMPREPLY[@]}; i++)); do
                    COMPREPLY[i]=$(printf "%q" "${COMPREPLY[$i]}")
                done
            fi
            return 0
        fi
    }
complete -F _up_complete up
complete -F _up_complete -
fi

# changing directory
alias   ..='up'
alias   cd..='cd ..'
alias   -- -='up'
alias   -- --='cd ../..'
alias   -- ---='cd ../../..'
alias   -- ----='cd ../../../..'

function mkcd {
    [ -d "$1" ] && echo >&2 "WARNING: Directory '$1' alread exists"
    # shellcheck disable=SC2164  # return using last exit code
    mkdir -p "$1" && cd "$1"
}

# Print date/time for seconds since epoche
function unixdate
{
    typeset secs=$1
    if  [ -n "$(echo "$secs" | tr -d 0-9)" ]; then
        echo "Parameter is not numeric."
        return
    fi
    date "+%a %F %T %Z" -d "@$secs"
}

# Print date/time for milli-seconds since epoche
function javadate
{
    typeset secs=$1
    if  [ -n "$(echo "$secs" | tr -d 0-9)" ]; then
        echo "Parameter is not numeric."
        return
    fi
    secs=$(echo "$secs/1000" | bc)
    date "+%a %F %T %Z" -d "@$secs"
}

# read text from stdin and prefix it with the current timestamp
function ts_prefix
{
    typeset l
    while read -r l; do
        echo "$(date "+%Y-%m-%dT%H:%M:%S.%03N"): $l"
    done
}

#
# Change width of terminal
#
function cols
{
    [ $# != 1 ] && echo >&2 "Usage: cols <num>" && return 1
    typeset C
    C=$1
    [ "$C" = "max" ] && C=500
    [ -n "${C//[0-9]/}" ] && echo >&2 "Argument must be numeric or 'max'." && return 1
    eval "$(resize)" 2>/dev/null
    printf "\e[8;%d;%d;t" "$LINES" "$C"
}

#
# Change height of terminal
#
function lines
{
    [ $# != 1 ] && echo >&2 "Usage: lines <num>" && return 1
    typeset L
    L=$1
    [ "$L" = "max" ] && L=500
    [ -n "${L//[0-9]/}" ] && echo >&2 "Argument must be numeric or 'max'." && return 1
    eval "$(resize)" 2>/dev/null
    printf "\e[8;%d;%d;t" "$L" "$COLUMNS"
}

#---------[ Bash Completions ]-------------------------------------------------

if [ "$IS_BASH" ]; then
    # shellcheck disable=SC1091
    [ -s "$HOME/.was-complete.bash" ] && . "$HOME/.was-complete.bash"
    if [ -s "$HOME/.maven-completion.bash" ]; then
        # shellcheck disable=SC1091
        . "$HOME/.maven-completion.bash"
    elif [ -s "$HOME/.maven-completion" ]; then
        # shellcheck disable=SC1091
        . "$HOME/.maven-completion"
    fi
fi

#---------[ VIM Config ]-------------------------------------------------------
# Create minimum vimrc in .vimrc.rks
if ! grep "^\" VERSION:$RKS_VERSION\$" "$HOME/.vimrc.rks" >/dev/null 2>&1; then
    cat > "$HOME/.vimrc.rks" <<EOF
" VERSION:$RKS_VERSION
"
" VIM configuration
"

if(&compatible == 1)
    set nocompatible
endif

set visualbell

" assume dark background
set background=dark
"set background=light
" enable syntax highlighting
syntax on
" enable filetype specific indent and plugins
filetype plugin indent on
" try to change xterm title
set title
set titlestring=%{\$HOSTNAME}:\\ %t%(\\ %M%)%(\\ (%{expand(\\"%:p:~:h\\")})%)%(\\ %a%)\\ -\\ VIM
" no mouse
set mouse=
" display cursor position
set ruler
" show command on last line
set showcmd
" default indent 4 spaces
set shiftwidth=4
set shiftround
" start search while typing
set incsearch
" backspace over autoindent, linebreaks and 'start of insert'
set backspace=indent,eol,start
" don't move to start of line when jumping
set nostartofline
" allow changed buffers to become hidden
set hidden
" keep 4 lines of context above/below cursor when scrolling
set scrolloff=4
" use this chars to show tabs and trailing spaces when 'list' is set
" That is: tab:\u00bb-,trail:\u00b7,nbsp:\u00d7,eol:$
set listchars=tab:»-,trail:·,nbsp:×,eol:$
"set listchars=tab:>-,trail:~,nbsp:_,eol:$
" allow <left>/<right> to move to prev/next line
set whichwrap=<,>
" detect mode lines
set modeline
" Toggle number
map  <F7>   : set invnumber<CR>
imap <F7>   <C-O>:set invnumber<CR>
" Switch on/off highlighting of search matches
map  <F8>   :set invhlsearch hlsearch?<CR>
" toggle paste option
set pastetoggle=<F9>
map  <F9>   :set invpaste paste?<CR>
" Ctrl-N: next buffer
noremap <C-N> :bn<CR>
" Ctrl-P: previous buffer
noremap <C-P> :bp<CR>
" special shiftwidth and expand tab for pom.xml
autocmd!  BufNewFile,BufRead pom.xml setlocal sw=2 et

"    vim:tw=75 et ts=4 sw=4 sr ai comments=\:\" formatoptions=croq
EOF
fi
# make .vimrc.rks the vim config file
export VIMINIT="source $HOME/.vimrc.rks"


#---------[ QC MINI ]----------------------------------------------------------
#

# File to store directories (incl. labeled dirs)
[ -z "${QC_DIRSTORE:-}" ] && export QC_DIRSTORE="$HOME/.dirstore"

unalias dstore >/dev/null 2>&1
unalias qc >/dev/null 2>&1

#
# Stores entries in QC_DIRSTORE
#
# Usage:
#   Store current directory: dstore
#   Store given directories: dstore dir1 ...
#   Label current directory: dstore :<label>
#   Label given directory:   dstore :<label> dir
#
# Also:
# -e opens QC_DIRSTORE in editor
# -l list dirstore content
#
# shellcheck disable=SC3044 # typeset is not POSIX
dstore()
{
    # IMPORTANT: reset OPTIND
    typeset -i OPTIND=1
    typeset qcm_o
    while  getopts "elh" qcm_o "$@"; do
        case "$qcm_o" in
            e) ${EDITOR:-vi} "$QC_DIRSTORE"; return $? ;;
            l) cat "$QC_DIRSTORE"; return $? ;;
            h | *)
                echo >&2 "Usage:"
                echo >&2 "  dstore"
                echo >&2 "     Store current directory."
                echo >&2 "  dstore dir.."
                echo >&2 "     Store dir(s)."
                echo >&2 "  dstore :label"
                echo >&2 "     Store current directory with label."
                echo >&2 "  dstore :label dir"
                echo >&2 "     Store given directory with label."
                echo >&2 "  dstore -e"
                echo >&2 "     Open index in editor."
                echo >&2 "  dstore -l"
                echo >&2 "     Display index."
                echo >&2 "  dstore -h"
                echo >&2 "     Show this help."
                echo >&2 ""
                echo >&2 "Index file: $QC_DIRSTORE"
                echo >&2 ""
                return 1
        esac
    done
    shift $((OPTIND-1))

    [ $# -eq 0 ] && set - "$PWD"

    typeset qcm_dir

    case "$1" in
        :*)
            if [ ${#1} -eq 1 ] || [ "${1//[-A-Za-z0-9_]/}" != ':' ]; then
                echo >&2 "ERROR: Invalid label '$1'."
                return 1
            fi

            if [ $# -eq 1 ]; then
                qcm_dir="."
            elif [ $# -eq 2 ]; then
                qcm_dir="$2"
            else
                echo >&2 "ERROR: Expected max 2 arguments"
                return 1
            fi
            if [ -d "$qcm_dir" ]; then
                qcm_dir=$(cd "$qcm_dir" && /bin/pwd)
                echo "$1 $qcm_dir" >> "$QC_DIRSTORE"
            else
                echo >&2 "$qcm_dir: Not a directory"
            fi
            ;;
        *)
            for qcm_dir in "$@"; do
                if [ -d "$qcm_dir" ]; then
                    qcm_dir=$(cd "$qcm_dir" && /bin/pwd)
                    echo "$qcm_dir" >> "$QC_DIRSTORE"
                else
                    echo >&2 "$qcm_dir: Not a directory"
                fi
            done
            ;;
    esac

    # delete duplicates
    sort -u "$QC_DIRSTORE" > "$QC_DIRSTORE.sorted"
    mv "$QC_DIRSTORE.sorted" "$QC_DIRSTORE"
}


if [ -n "${ZSH_VERSION:-}" ]; then
    alias qc='noglob __qc'
else
    # bash, ksh, mksh, pdksh, dash
    alias qc='set -f;qcm_rst_f=true __qc'
fi

__qc_glob_match()
{
    test -e "$1" -o -L "$1"
}

# shellcheck disable=SC3008,SC3044 # select and typeset are not POSIX
__qc()
{
    [ -n "${qcm_rst_f:-}" ] && set +f
    unset qcm_rst_f

    # locally no error message (and function exit) on not matching glob
    [ -n "${ZSH_VERSION:-}" ] && setopt localoptions nonomatch

    if [ ! -r "$QC_DIRSTORE" ]; then
        echo >&2 "qc_mini: Index file does not exist/is not readable: $QC_DIRSTORE"
        return 1
    fi

    # IMPORTANT: reset OPTIND
    typeset -i OPTIND=1
    typeset qcm_o
    while  getopts "lSh" qcm_o "$@"; do
        case "$qcm_o" in
            l) # list labeled directories
                grep -h "^:[^ ]*" "$QC_DIRSTORE" "$QC_DIRSTORE"-* 2>/dev/null
                return 0
                ;;
            S) # show indexes
                for qcm_fn in "$QC_DIRSTORE" "$QC_DIRSTORE"-*; do
                    if [ -e "$qcm_fn" ]; then
                        echo "$qcm_fn"
                        echo "   Last Chg: $(stat -c "%y" "$qcm_fn")"
                        printf "   Entries:  %'d (%'d bytes)\n" "$(wc -l < "$qcm_fn")" "$(wc -c < "$qcm_fn")"
                        echo "   Labeled entries:  $(grep -c "^:" "$qcm_fn")"
                    fi
                done
                return
                ;;

            h | *)
                # unknown option
                echo >&2 "Usage:"
                echo >&2 "  qc dir"
                echo >&2 "    Change to directory matching 'dir*'"
                echo >&2 "  qc dir1 dir2"
                echo >&2 "    Change to directory matching 'dir1*/dir2*'"
                echo >&2 "  qc -l"
                echo >&2 "    List labeled dirs."
                echo >&2 "  qc -S"
                echo >&2 "    Show used index files."
                echo >&2 "  qc -h"
                echo >&2 "    Show this help."
                echo >&2 "  qc -"
                echo >&2 "    Act like 'cd -'"
                echo >&2 "  qc"
                echo >&2 "    Act like 'cd'"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [ $# -eq 0 ]; then
        # shellcheck disable=SC2164   # return with exit code below
        cd
        return
    elif [ $# -eq 1 ] && [ "$1" = "-" ]; then
        # shellcheck disable=SC2164   # return with exit code below
        cd -
        return
    elif [ "$1" = "--" ]; then
        shift
    fi

    typeset qcm_call_param="$*"

    typeset qcm_pattern=""
    case "$1" in
        :*) qcm_pattern="^$1";;
        *)
            typeset qcm_word
            for qcm_word in "$@"; do
                # remove trailing '*', replace others with [^/]*
                qcm_word="$(echo "$qcm_word" | sed 's/\*\+$//;s%\*\+%[^/]*%')"
                case "$qcm_word" in
                    */) qcm_pattern="$qcm_pattern/$qcm_word" ;;
                    *)  qcm_pattern="$qcm_pattern/${qcm_word}[^/]*" ;;
                esac

            done
            qcm_pattern="$(echo "$qcm_pattern" | sed 's%//\+%/\\(.*/\\)\\?%g;s%/\+$%%')"
            qcm_pattern="$qcm_pattern$"
            ;;
    esac

    qcm_oldIFS="$IFS"
    IFS="$(printf '\nx')" && IFS="${IFS%x}"
    # shellcheck disable=SC2046  # IFS is set
    if __qc_glob_match "$QC_DIRSTORE"-*; then
        set -- $(grep -h -- "$qcm_pattern" "$QC_DIRSTORE" "$QC_DIRSTORE"-* | sed 's/^:[^ ]* //' | sort -u)
    else
        set -- $(grep -h -- "$qcm_pattern" "$QC_DIRSTORE" | sed 's/^:[^ ]* //' | sort -u)
    fi

    IFS="$qcm_oldIFS"
    case $# in
        0 ) echo >&2 "Not found: '$qcm_call_param' ($qcm_pattern)" ;;
        1 )
            # shellcheck disable=SC2164   # return with exit code below
            cd "$1"
            return
            ;;
        * )
            typeset qcm_dir
            typeset qcm_rc
            qcm_rc=0
            select qcm_dir in "$@"; do
                if [ "$qcm_dir" = "" ]; then
                    [ "$REPLY" = "q" ] && break
                else
                    # shellcheck disable=SC2164 #
                    cd "$qcm_dir"
                    qcm_rc=$?
                    break
                fi
            done
            return $qcm_rc
            ;;
    esac
}

if [ -n "${BASH_VERSION:-}" ]; then
    # Lots of shellcheck directives now as the following is BASH code
    # shellcheck disable=SC2207,SC3003,SC3010,SC3030,SC3043,SC3044,SC3050,SC3054
    _qc_complete()
    {
        local cur opts
        COMPREPLY=()

        #_get_comp_words_by_ref -n : cur
        cur="${COMP_WORDS[COMP_CWORD]}"
        if [ "${COMP_WORDS[COMP_CWORD-1]}" = ":" ]; then
            cur=":$cur"
        fi

        if [ -n "$cur" ]; then
            if [[ "$cur" = ":"* ]]; then
                opts=$(grep "^${cur}[^ ]* " "${QC_DIRSTORE}" | sed "s% .*%%;s%^:%%")
            else
                local qcm_pattern qcm_word
                qcm_pattern=""
                for qcm_word in "${COMP_WORDS[@]:1}"; do
                    qcm_word="$(echo "$qcm_word" | sed 's/\*\+$//;s%\*\+%[^/]*%')"
                    case "$qcm_word" in
                        */) qcm_pattern="$qcm_pattern/$qcm_word" ;;
                        *)  qcm_pattern="$qcm_pattern/${qcm_word}[^/]*" ;;
                    esac
                done
                qcm_pattern="$(echo "$qcm_pattern" | sed 's%//\+%/\\(.*/\\)\\?%g;s%/\+$%%')"
                qcm_pattern="$qcm_pattern$"
                opts=$(grep "$qcm_pattern" "${QC_DIRSTORE}" | grep -o "${cur}[^/]*$")
            fi
            local IFS=$'\n'
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur#:}") )
            # Do escaping
            COMPREPLY=( $(printf '%q\n' "${COMPREPLY[@]}") )
            return 0
        fi
    }
    # shellcheck disable=SC3044 # bash only
    complete -o nospace -F _qc_complete qc
fi

# vim:ft=sh:et:ts=4:sw=4:
