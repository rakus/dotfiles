# shellcheck shell=bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


#PS4='+ $(date "+%s.%N")\011 '
#exec 3>&2 2>/tmp/bashstart.log
#set -x


# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi



# If not running interactively, don't do anything
[ -z "$PS1" ] && return


export EDITOR=vi
export VISUAL=vim

if [ "$(printf "%d" "'A")" -eq 193 ]; then
    export EBCDIC=true
fi

# are we running in guake terminal?
# Used in VIM configuration
#GPARENT="$(pstree -as $$)"
#if echo "$GPARENT" | grep -q "guake.main"; then
#    export GUAKE=true
#else
#    unset GUAKE
#fi
#unset GPARENT

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# Show timestamp with commands when calling history
HISTTIMEFORMAT='%F-%T: '

HISTIGNORE="rotX*"

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=2000
export HISTFILESIZE=2000


# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# The pattern "**" used in a pathname expansion context matches all files and
# zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh /usr/bin/lesspipe)"

#---------[ Determine Color Support ]------------------------------------------
COLOR_SUPPORTED=

# set a fancy prompt (non-color, unless we know we "want" color)
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    COLOR_SUPPORTED=yes
else
    COLOR_SUPPORTED=
fi

# If we have this TERMs, we definitely have color.
case "$TERM" in
    xterm-color) COLOR_SUPPORTED=yes;;
    xterm-256color) COLOR_SUPPORTED=yes;;
esac

#---------[ PROMPT ]-----------------------------------------------------------

#
# Assumes:
# $1: The standard terminal title
#
getTermTitle()
{
    if [ -n "${MANUAL_TERMINAL_TITLE:-}" ]; then
        echo "$MANUAL_TERMINAL_TITLE"
    else
        echo "$1"
    fi
}

termTitle()
{
    if [ $# -eq 0 ]; then
        unset MANUAL_TERMINAL_TITLE
    else
        export MANUAL_TERMINAL_TITLE="$*"
    fi
}

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# shellcheck disable=SC2034 # used by __git_ps1
GIT_PS1_SHOWDIRTYSTATE=1
# shellcheck disable=SC2034 # used by __git_ps1
GIT_PS1_SHOWUNTRACKEDFILES=1
# shellcheck disable=SC2034 # used by __git_ps1
GIT_PS1_SHOWUPSTREAM=1

if [ "$COLOR_SUPPORTED" = yes ]; then
    defClr=32
    [ "$(id -un)" = "root" ] && defClr="41;33"
    nClr="$defClr"
    pClr=31
    # [$(date +%H:%M:%S)]
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;${nClr}m\]($?)\[\e]0;$(getTermTitle "\w")\a\]\u@\h\[\033[00m\] \[\033[01;${pClr}m\]\w\[\033[00m\]\n$(__git_ps1 "[%s] ")$ '

else
    PS1='${debian_chroot:+($debian_chroot)}($?)\u@\h:\w\n$(__git_ps1 "[%s] ")$ '
fi
if [ $SHLVL -gt 1 ]; then
    PS1="[$SHLVL]$PS1"
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    if [ -r "$HOME/.dircolors" ]; then
        eval "$(dircolors -b ~/.dircolors)"
    else
        eval "$(dircolors -b)"
    fi
fi


if [ "$COLOR_SUPPORTED" = "yes" ]; then
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

#---------[ Update the PATH ]--------------------------------------------------

function addToPath()
{
    local dir
    dir=$(readlink -f "$1")
    if [ -d "$dir" ] && [[ ":$PATH:" != *":$dir:"* ]]; then
        PATH="$PATH:$dir"
    fi
}

# Add JAVA_HOME to path if it exists
if [ -n "$JAVA_HOME" ]; then
    addToPath "$JAVA_HOME/bin"
fi

export PATH

# add local man directories if they exist
if [ -d "$HOME/man" ]; then
    export MANPATH="$MANPATH:$HOME/man"
fi
if [ -d "$HOME/local/man" ]; then
    export MANPATH="$MANPATH:$HOME/local/man"
fi

#---------[ Includes ]---------------------------------------------------------

# switch qc to use fzf
export QC_FZF=true

if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*.bash; do
        if [ -f "$rc" ]; then
            # shellcheck disable=SC1090
            . "$rc"
        fi
    done
fi

if [ -f "$HOME/.qc/quick_change_directory.sh" ]; then
    . "$HOME/.qc/quick_change_directory.sh"
fi

# Setup rust / rustup
if [ -e "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
if [[ -s "/opt/sdkman/bin/sdkman-init.sh" ]]; then
    export SDKMAN_DIR="/opt/sdkman"
    source "/opt/sdkman/bin/sdkman-init.sh"

    # SDK is rarely used, it could also be loaded on demand.
    #alias sdk='unalias sdk;source "/opt/sdkman/bin/sdkman-init.sh";sdk'
fi

#set +x
#exec 2>&3 3>&-

true
